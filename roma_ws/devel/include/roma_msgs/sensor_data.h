// Generated by gencpp from file roma_msgs/sensor_data.msg
// DO NOT EDIT!


#ifndef ROMA_MSGS_MESSAGE_SENSOR_DATA_H
#define ROMA_MSGS_MESSAGE_SENSOR_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roma_msgs
{
template <class ContainerAllocator>
struct sensor_data_
{
  typedef sensor_data_<ContainerAllocator> Type;

  sensor_data_()
    : gps_lat(0.0)
    , gps_lon(0.0)
    , vel(0.0)
    , accel_x(0.0)
    , heading(0.0)
    , steer_ang(0.0)  {
    }
  sensor_data_(const ContainerAllocator& _alloc)
    : gps_lat(0.0)
    , gps_lon(0.0)
    , vel(0.0)
    , accel_x(0.0)
    , heading(0.0)
    , steer_ang(0.0)  {
  (void)_alloc;
    }



   typedef double _gps_lat_type;
  _gps_lat_type gps_lat;

   typedef double _gps_lon_type;
  _gps_lon_type gps_lon;

   typedef double _vel_type;
  _vel_type vel;

   typedef double _accel_x_type;
  _accel_x_type accel_x;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _steer_ang_type;
  _steer_ang_type steer_ang;





  typedef boost::shared_ptr< ::roma_msgs::sensor_data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roma_msgs::sensor_data_<ContainerAllocator> const> ConstPtr;

}; // struct sensor_data_

typedef ::roma_msgs::sensor_data_<std::allocator<void> > sensor_data;

typedef boost::shared_ptr< ::roma_msgs::sensor_data > sensor_dataPtr;
typedef boost::shared_ptr< ::roma_msgs::sensor_data const> sensor_dataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roma_msgs::sensor_data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roma_msgs::sensor_data_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roma_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roma_msgs': ['/home/trey/scr/robomagellan-2019/roma_ws/src/roma_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roma_msgs::sensor_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roma_msgs::sensor_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roma_msgs::sensor_data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roma_msgs::sensor_data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roma_msgs::sensor_data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roma_msgs::sensor_data_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roma_msgs::sensor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ff8996641964b6ddc02189f77b82f67";
  }

  static const char* value(const ::roma_msgs::sensor_data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ff8996641964b6dULL;
  static const uint64_t static_value2 = 0xdc02189f77b82f67ULL;
};

template<class ContainerAllocator>
struct DataType< ::roma_msgs::sensor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roma_msgs/sensor_data";
  }

  static const char* value(const ::roma_msgs::sensor_data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roma_msgs::sensor_data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 gps_lat\n\
float64 gps_lon\n\
float64 vel\n\
float64 accel_x\n\
float64 heading\n\
float64 steer_ang\n\
";
  }

  static const char* value(const ::roma_msgs::sensor_data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roma_msgs::sensor_data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.gps_lat);
      stream.next(m.gps_lon);
      stream.next(m.vel);
      stream.next(m.accel_x);
      stream.next(m.heading);
      stream.next(m.steer_ang);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sensor_data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roma_msgs::sensor_data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roma_msgs::sensor_data_<ContainerAllocator>& v)
  {
    s << indent << "gps_lat: ";
    Printer<double>::stream(s, indent + "  ", v.gps_lat);
    s << indent << "gps_lon: ";
    Printer<double>::stream(s, indent + "  ", v.gps_lon);
    s << indent << "vel: ";
    Printer<double>::stream(s, indent + "  ", v.vel);
    s << indent << "accel_x: ";
    Printer<double>::stream(s, indent + "  ", v.accel_x);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "steer_ang: ";
    Printer<double>::stream(s, indent + "  ", v.steer_ang);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROMA_MSGS_MESSAGE_SENSOR_DATA_H
