// Generated by gencpp from file roma_msgs/motion_cmds.msg
// DO NOT EDIT!


#ifndef ROMA_MSGS_MESSAGE_MOTION_CMDS_H
#define ROMA_MSGS_MESSAGE_MOTION_CMDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace roma_msgs
{
template <class ContainerAllocator>
struct motion_cmds_
{
  typedef motion_cmds_<ContainerAllocator> Type;

  motion_cmds_()
    : power(0.0)
    , steer_ang(0.0)  {
    }
  motion_cmds_(const ContainerAllocator& _alloc)
    : power(0.0)
    , steer_ang(0.0)  {
  (void)_alloc;
    }



   typedef float _power_type;
  _power_type power;

   typedef float _steer_ang_type;
  _steer_ang_type steer_ang;





  typedef boost::shared_ptr< ::roma_msgs::motion_cmds_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::roma_msgs::motion_cmds_<ContainerAllocator> const> ConstPtr;

}; // struct motion_cmds_

typedef ::roma_msgs::motion_cmds_<std::allocator<void> > motion_cmds;

typedef boost::shared_ptr< ::roma_msgs::motion_cmds > motion_cmdsPtr;
typedef boost::shared_ptr< ::roma_msgs::motion_cmds const> motion_cmdsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::roma_msgs::motion_cmds_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::roma_msgs::motion_cmds_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace roma_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'roma_msgs': ['/home/jkleiber/robomagellan-2019/roma_ws/src/roma_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::roma_msgs::motion_cmds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::roma_msgs::motion_cmds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roma_msgs::motion_cmds_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::roma_msgs::motion_cmds_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roma_msgs::motion_cmds_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::roma_msgs::motion_cmds_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::roma_msgs::motion_cmds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4f545a067a10b78db31f8ffc31ecfca8";
  }

  static const char* value(const ::roma_msgs::motion_cmds_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4f545a067a10b78dULL;
  static const uint64_t static_value2 = 0xb31f8ffc31ecfca8ULL;
};

template<class ContainerAllocator>
struct DataType< ::roma_msgs::motion_cmds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "roma_msgs/motion_cmds";
  }

  static const char* value(const ::roma_msgs::motion_cmds_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::roma_msgs::motion_cmds_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 power\n\
float32 steer_ang\n\
";
  }

  static const char* value(const ::roma_msgs::motion_cmds_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::roma_msgs::motion_cmds_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.power);
      stream.next(m.steer_ang);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct motion_cmds_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::roma_msgs::motion_cmds_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::roma_msgs::motion_cmds_<ContainerAllocator>& v)
  {
    s << indent << "power: ";
    Printer<float>::stream(s, indent + "  ", v.power);
    s << indent << "steer_ang: ";
    Printer<float>::stream(s, indent + "  ", v.steer_ang);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROMA_MSGS_MESSAGE_MOTION_CMDS_H
