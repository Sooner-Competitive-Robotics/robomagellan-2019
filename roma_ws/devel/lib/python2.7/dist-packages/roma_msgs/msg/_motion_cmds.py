# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from roma_msgs/motion_cmds.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class motion_cmds(genpy.Message):
  _md5sum = "b8d7592f04e59bfb9ef4b6b5b23f809d"
  _type = "roma_msgs/motion_cmds"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 power
float32 steer_ang
bool near_cone
bool cone_visible
float32 opencv_error"""
  __slots__ = ['power','steer_ang','near_cone','cone_visible','opencv_error']
  _slot_types = ['float32','float32','bool','bool','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       power,steer_ang,near_cone,cone_visible,opencv_error

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(motion_cmds, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.power is None:
        self.power = 0.
      if self.steer_ang is None:
        self.steer_ang = 0.
      if self.near_cone is None:
        self.near_cone = False
      if self.cone_visible is None:
        self.cone_visible = False
      if self.opencv_error is None:
        self.opencv_error = 0.
    else:
      self.power = 0.
      self.steer_ang = 0.
      self.near_cone = False
      self.cone_visible = False
      self.opencv_error = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f2Bf().pack(_x.power, _x.steer_ang, _x.near_cone, _x.cone_visible, _x.opencv_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.power, _x.steer_ang, _x.near_cone, _x.cone_visible, _x.opencv_error,) = _get_struct_2f2Bf().unpack(str[start:end])
      self.near_cone = bool(self.near_cone)
      self.cone_visible = bool(self.cone_visible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f2Bf().pack(_x.power, _x.steer_ang, _x.near_cone, _x.cone_visible, _x.opencv_error))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.power, _x.steer_ang, _x.near_cone, _x.cone_visible, _x.opencv_error,) = _get_struct_2f2Bf().unpack(str[start:end])
      self.near_cone = bool(self.near_cone)
      self.cone_visible = bool(self.cone_visible)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f2Bf = None
def _get_struct_2f2Bf():
    global _struct_2f2Bf
    if _struct_2f2Bf is None:
        _struct_2f2Bf = struct.Struct("<2f2Bf")
    return _struct_2f2Bf
